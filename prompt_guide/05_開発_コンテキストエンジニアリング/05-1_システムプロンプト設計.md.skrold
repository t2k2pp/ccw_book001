# 第5章: 開発・エンジニアリング（コンテキストエンジニアリング）

## 5-1. システムプロンプト設計

このセクションでは、AIの動作を制御するシステムプロンプトの設計方法を紹介します。

---

### 📋 プロジェクト作業指針の作成（CLAUDE.md方式）

#### 使用手法
- **Constraint Prompting**（行動規範の明示）
- **Negative Prompting**（禁止事項の明確化）

#### 期待する効果
- AIの一貫した動作
- プロジェクト規約の遵守
- 意図しない変更の防止

#### プロンプト例

```
このプロジェクト用の作業指針ファイル（CLAUDE.md）を作成してください。

【プロジェクト情報】
- プロジェクト名: [名前]
- 種類: [Webアプリ / ライブラリ / CLI等]
- 技術スタック: [使用技術]
- チーム規模: [人数]

【含めるべき内容】
1. 基本原則
   - [プロジェクトの重要な方針]

2. 禁止事項
   - リファクタリング時の機能追加・削除禁止
   - 指示外の「ついでの改善」禁止
   - [プロジェクト固有の禁止事項]

3. コーディング規約
   - [言語固有の規約]
   - [命名規則]
   - [ファイル構成ルール]

4. 作業フロー
   - [PRの作り方]
   - [テストの実行タイミング]
   - [コミットのルール]

5. 過去の教訓
   - [過去に発生した問題と対策]

それでは作成をお願いします。
```

**具体例**

```
Reactプロジェクト用のCLAUDE.mdを作成してください。

【プロジェクト情報】
- プロジェクト名: ECサイト管理画面
- 種類: Webアプリケーション
- 技術スタック: React 18, TypeScript, Tailwind CSS, React Query
- チーム規模: 5名

【重要な方針】
- TypeScript strictモード必須
- すべてのコンポーネントはfunction形式で作成
- スタイルはTailwind CSSのみ使用（CSS-in-JS禁止）
- データフェッチングはReact Query使用

【禁止事項】
- リファクタリング時の機能追加・削除
- anyの使用
- インラインスタイルの使用

【過去の教訓】
- リファクタリング中にバリデーション機能を勝手に追加して問題になった

上記を踏まえて、CLAUDE.mdを作成してください。
```

---

### 🤖 カスタムAI（GPTs）の作成

#### 使用手法
- **Role Prompting**（専門家の役割定義）
- **Constraint Prompting**（動作制約）

#### 期待する効果
- 特定タスクに特化したAI
- 一貫した品質の出力
- チーム全体での活用

#### プロンプト例

````
以下の用途のカスタムGPTsの設定を作成してください。

【用途】
[何をするためのAIか]

【対象ユーザー】
[使用者のスキルレベルや職種]

【AIの役割】
[どんな専門家として振る舞うか]

【入力】
[ユーザーから何を受け取るか]

【出力】
[何を返すか、どんな形式で]

【制約・注意事項】
- [行ってはいけないこと]
- [必ず守るべきこと]

【トーン】
[フォーマル / フレンドリー / 簡潔 / 詳細]

上記を踏まえて、以下の形式で設定を作成してください：

## カスタムGPT設定

**Name**: [AI名]

**Description**:
[説明]

**Instructions**:
\`\`\`
[システムプロンプト全文]
\`\`\`

**Conversation starters**:
- [質問例1]
- [質問例2]
- [質問例3]

**Knowledge files**: [必要なファイルがあれば]

**Capabilities**:
- [ ] Web Browsing
- [ ] DALL·E Image Generation
- [ ] Code Interpreter````

**具体例：コードレビューAI**

```
コードレビュー専用のカスタムGPTsの設定を作成してください。

【用途】
プルリクエストのコードレビューを行う

【対象ユーザー】
中級〜上級エンジニア

【AIの役割】
- 経験豊富なシニアエンジニア
- 建設的なフィードバックを提供
- セキュリティとパフォーマンスに厳しい

【入力】
- ソースコードの差分
- PRの説明

【出力】
- 構造化されたレビューコメント
- 重大度別の問題指摘
- 具体的な改善案（コード例付き）

【制約・注意事項】
- 批判的にならず、建設的に
- 些末な指摘より重要な問題に焦点
- 必ずポジティブな点も指摘

【トーン】
フレンドリーだが的確

上記を踏まえて、カスタムGPT設定を作成してください。
```

---

### 🔧 スラッシュコマンドの作成（Claude Code）

#### プロンプト例

```
Claude Codeの .claude/commands/ ディレクトリに
以下のスラッシュコマンドを作成してください。

【コマンド名】
[コマンド名（例: /test）]

【用途】
[何をするコマンドか]

【実行内容】
[コマンドが実行する具体的な処理]

【ファイル名】
.claude/commands/[コマンド名].md

それでは作成をお願いします。
```

**具体例**

```
Claude Codeで「テストを実行してエラーがあれば修正する」
スラッシュコマンドを作成してください。

【コマンド名】
/test-and-fix

【用途】
テストを実行し、失敗したテストがあれば自動的に修正する

【実行内容】
1. npm test を実行
2. 失敗したテストがあれば、エラー内容を分析
3. 原因を特定して修正
4. 再度テスト実行して確認
5. 全て通るまで繰り返す

【ファイル名】
.claude/commands/test-and-fix.md

それでは作成をお願いします。
```

---

## まとめ

| タスク | 主要手法 | 用途 |
|--------|----------|------|
| CLAUDE.md作成 | Constraint + Negative | プロジェクト規約の明示 |
| カスタムGPTs | Role + Constraint | 特定タスク特化AI |
| スラッシュコマンド | Constraint | 定型作業の自動化 |

これで第5章「コンテキストエンジニアリング」の主要部分は完了です。
