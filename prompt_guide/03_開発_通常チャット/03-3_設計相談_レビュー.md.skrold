# 第3章: 開発・エンジニアリング（通常チャット）

## 3-3. 設計相談・レビュー

このセクションでは、アーキテクチャ設計やコードレビューに役立つプロンプトを紹介します。

---

### 🏗️ システムアーキテクチャ設計の相談

#### 使用手法
- **Tree of Thoughts**（複数の設計案を比較）
- **Role Prompting**（アーキテクトの役割）

#### 期待する効果
- 複数の設計オプションの比較検討
- トレードオフの明確化
- スケーラビリティやメンテナンス性の考慮

#### 推奨モデル
- **推奨**: o1, GPT-4o, Claude 3.5 Sonnet
- **理由**: 複雑な設計判断と多角的な検討に優れる

#### プロンプト例

```
あなたは経験豊富なソフトウェアアーキテクトです。
以下のシステム設計について、複数の案を提示し比較してください。

【要件】
- システムの概要: [何を構築するか]
- スケール: [想定ユーザー数、データ量]
- 主要機能: [実装すべき機能]
- 非機能要件: [性能、可用性、セキュリティ等]
- 制約: [技術的/予算的制約]

【出力形式】
## システムアーキテクチャ提案

### 1. 要件の整理
[要件を体系的に整理]

### 2. アーキテクチャ案

#### 案1: [アーキテクチャ名]
**概要**: [このアーキテクチャの説明]

**構成図**:
```
[テキストベースの構成図]
```

**メリット**:
✅ [メリット1]
✅ [メリット2]

**デメリット**:
❌ [デメリット1]
❌ [デメリット2]

**技術スタック**: [使用技術]
**初期コスト**: [概算]
**運用コスト**: [概算]

---

#### 案2: [アーキテクチャ名]
[同上]

---

#### 案3: [アーキテクチャ名]
[同上]

### 3. 比較マトリックス

| 評価項目 | 案1 | 案2 | 案3 |
|----------|-----|-----|-----|
| スケーラビリティ | ⭐⭐⭐ | ⭐⭐ | ⭐⭐⭐ |
| 開発速度 | ⭐⭐ | ⭐⭐⭐ | ⭐⭐ |
| 保守性 | ⭐⭐⭐ | ⭐⭐ | ⭐⭐⭐ |
| 初期コスト | 高 | 低 | 中 |
| 運用コスト | 低 | 高 | 中 |

### 4. 推奨アーキテクチャ
🎯 **案[X]: [名前]**

**理由**:
あなたの要件([具体的な要件])を考慮すると、以下の理由でこの案を推奨します：
1. [理由1]
2. [理由2]
3. [理由3]

### 5. 実装ロードマップ
[段階的な実装計画]

### 6. リスクと軽減策
| リスク | 影響 | 軽減策 |
|--------|------|--------|
| [リスク1] | [影響] | [対策] |

上記の形式で、実用的な設計提案を提供してください。
```

---

### 📝 コードレビューの実施

#### 使用手法
- **Role Prompting**（シニアエンジニアのレビュワー）
- **Constraint Prompting**（レビュー観点の明示）

#### 期待する効果
- 潜在的なバグやセキュリティ問題の発見
- コード品質の向上
- ベストプラクティスの学習

#### 推奨モデル
- **推奨**: Claude 3.5 Sonnet, GPT-4o
- **理由**: コード品質評価とフィードバックに優れる

#### プロンプト例

````
あなたは経験豊富なシニアエンジニアです。
以下のコードを厳しくレビューしてください。

【レビュー対象】
\`\`\`[言語]
[レビュー対象のコード]
```

【コンテキスト】
- 目的: [このコードの目的]
- プロジェクトのコーディング規約: [規約]

【レビュー観点】
- 機能性（正しく動作するか）
- 可読性（理解しやすいか）
- 保守性（変更しやすいか）
- パフォーマンス
- セキュリティ
- エラーハンドリング
- テスタビリティ

【出力形式】
## コードレビュー

### 総合評価
**評価**: [優/良/可/要改善]

**要約**: [全体的な印象を2-3文で]

### 詳細レビュー

#### 🔴 重大な問題（必ず修正）
1. **[問題のタイトル]** (行[XX])
   \`\`\`[言語]
   [問題のあるコード]
   ```

   **問題点**: [何が問題か]
   **影響**: [どんな影響があるか]
   **修正案**:
   \`\`\`[言語]
   [修正後のコード]
   ```

#### 🟡 改善推奨（できれば修正）
1. **[改善点のタイトル]** (行[XX])
   [同上の形式]

#### 🟢 良い点
- [良い実装パターン1]
- [良い実装パターン2]

### セキュリティチェック
- [ ] SQLインジェクション対策
- [ ] XSS対策
- [ ] 認証/認可の適切な実装
- [ ] 機密情報の適切な扱い

### パフォーマンスチェック
- 計算量: O([オーダー])
- 改善余地: [あれば指摘]

### テスタビリティ
**評価**: [高/中/低]
**改善提案**: [提案]

### 推奨する次のステップ
1. [アクション1]
2. [アクション2]

上記の形式で、建設的なレビューを提供してください。````

---

### 🔐 セキュリティレビュー

#### 使用手法
- **Role Prompting**（セキュリティエンジニアの役割）
- **Constraint Prompting**（OWASP Top 10等のチェックリスト）

#### 期待する効果
- セキュリティ脆弱性の発見
- セキュアコーディングの実践
- コンプライアンス要件への対応

#### 推奨モデル
- **推奨**: Claude 3.5 Sonnet, GPT-4o
- **理由**: セキュリティ分析に優れる

#### プロンプト例

````
あなたはセキュリティエンジニアです。
以下のコードのセキュリティ脆弱性を徹底的に分析してください。

【対象コード】
\`\`\`[言語]
[セキュリティレビュー対象のコード]
```

【システムの概要】
- [システムの種類: Webアプリ/API/etc.]
- [扱うデータ: 個人情報の有無等]
- [認証方式]

【出力形式】
## セキュリティレビューレポート

### 総合評価
**リスクレベル**: [高/中/低]

### 発見された脆弱性

#### 🔴 深刻度: 高
1. **[脆弱性のタイプ]** (例: SQLインジェクション)
   \`\`\`[言語]
   [脆弱なコード]
   ```

   **脆弱性の詳細**: [攻撃手法と影響]
   **CVSS Score**: [スコア]
   **修正案**:
   \`\`\`[言語]
   [セキュアなコード]
   ```

#### 🟡 深刻度: 中
[同上]

### OWASP Top 10 チェックリスト
- [ ] A01: Broken Access Control
- [ ] A02: Cryptographic Failures
- [ ] A03: Injection
- [ ] A04: Insecure Design
- [ ] A05: Security Misconfiguration
- [ ] A06: Vulnerable and Outdated Components
- [ ] A07: Identification and Authentication Failures
- [ ] A08: Software and Data Integrity Failures
- [ ] A09: Security Logging and Monitoring Failures
- [ ] A10: Server-Side Request Forgery (SSRF)

### セキュアコーディングの推奨事項
1. [推奨事項1]
2. [推奨事項2]

上記の形式で、詳細なセキュリティレビューを提供してください。````

---

### 📐 データベース設計のレビュー

#### 使用手法
- **Role Prompting**（DBアーキテクトの役割）
- **Constraint Prompting**（正規化、パフォーマンス等の観点）

#### 期待する効果
- 適切なテーブル設計
- パフォーマンスの最適化
- データ整合性の保証

#### 推奨モデル
- **推奨**: Claude 3.5 Sonnet, GPT-4o, o1
- **理由**: データベース設計の評価に優れる

#### プロンプト例

````
あなたはデータベースアーキテクトです。
以下のDB設計をレビューしてください。

【設計内容】
```sql
[テーブル定義]
```

【要件】
- [データの用途]
- [アクセスパターン]
- [スケール]

【出力形式】
## データベース設計レビュー

### 正規化の評価
**評価**: [第X正規形]
**推奨**: [改善提案]

### パフォーマンスの観点
- インデックス設計: [評価と提案]
- クエリ最適化: [提案]

### データ整合性
- 制約の適切性: [評価]
- 外部キー設計: [評価]

### 改善提案
```sql
[改善後のスキーマ]
```

上記の形式で、DB設計レビューを提供してください。````

---

## まとめ

このセクションでは、以下の設計相談・レビュータスクに対応するプロンプトを紹介しました：

| タスク | 主要手法 | 推奨モデル |
|--------|----------|------------|
| アーキテクチャ設計 | Tree of Thoughts + Role | o1, GPT-4o, Claude 3.5 Sonnet |
| コードレビュー | Role + Constraint | Claude 3.5 Sonnet, GPT-4o |
| セキュリティレビュー | Role + Constraint | Claude 3.5 Sonnet, GPT-4o |
| DB設計レビュー | Role + Constraint | Claude 3.5 Sonnet, GPT-4o, o1 |

これで第3章「開発・エンジニアリング（通常チャット）」は完了です。
次の第4章では、Vibe Codingに関するプロンプトを紹介します。
